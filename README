- 10/11/24 - since `node_modules` in `infrastructure/lambda` is part of `.gitignore`, `node_modules` were not included in the lambda deployment package zip file when creating them in the workflow - solution was to include `npm install` in the `infrastructure/lambda` as part of the terraform `infrastructure.yaml` workflow - this wasn't an issue before because the other two lambda functions (`app-get.mjs` and `app-post.mjs`) do not rely on non-AWS sdk npm packages - lambda base layers come pre-packaged with the AWS sdks, so you don't need them available to the function within `node_modules`
- 10/11/24 - since runtime environment variables aren't available in client components, did a hacky thing of pulling it in a server component, then passing it as a component prop down to the client component, see `const lambdaPostImageFunctionUrl =
process.env.LAMBDA_POST_IMAGE_FUNCTION_URL ||
"lambdaPostImageFunctionUrl placeholder";` in `front-end/src/app/dashboard/page.js`
- 10/12/24 - had an issue where uploaded images wouldn't load in prod, but worked fine in dev, in prod it was getting 400s (some "url" error in the browser response) when making the same S3 calls being made successfully in dev, turns out, it was Next.js’s built-in Image Optimization API, which modifies the image URL for performance improvements like resizing and quality adjustments. This is why the URL is being rewritten to include /\_next/image?url=.... and the request being made to S3 didn't like this. Since you’re hosting your images on S3, and don’t need Next.js to optimize them (because they’re already optimized or handled elsewhere), you can disable Next.js’s image optimization for those images by marking them as external images. If you only want to disable optimization for certain images, you can use the unoptimized attribute in the Image component to bypass the Image Optimization API, `unoptimized` as a property in the Next.js `Image` component. Maybe this was happening because the Image Optimization API runs in prod but not in dev?
  - see `front-end/src/components/ListInsights.js` for more details, and I also modified `front-end/next.config.mjs` so objects from both directories in the bucket can be fetched
